<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta http-equiv="X-UA-Compatible" content="ie=edge" />
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
    integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
  <link rel="stylesheet" href="https://bootswatch.com/4/journal/bootstrap.min.css" />
  <script src="js/dashboardControl.js"></script> 
  <style>
      table.medicTable {
        font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
}

b{
    color:lawngreen

}


  
  </style>

  <title>VIDHealth</title>
</head>



<body >
  
    <div class="container" id = "medUsersOnline" value="<%= user.email %>" >
      <h1 class="mt-4" id="dash" value ="<%= user.email %>">Video Chat Portal</h1> 
      
      <p class="lead mb-3">Online clients: <%= clients.length %></p>
      <p class="lead mb-3"  >Your status has been updated to <b color="green"><B>AVAILABLE</B></b><p ></p></p>   
      <br>
      
          <p class="lead mb-3" id = "medUsersOnline">Waiting for a client to call...</p>          
          

      
      <br>

      <video id="video" width="100" height="80" autoplay></video>
      <p>split</p>
      <video id="video2" width="500" height="400" autoplay></video>





      </div>
      
  
      

    



  
      
    <button id = "medicReady" value="<%= user.email %>" class="btn btn-secondary" onclick="back2d()">Back to Dashboard</button>
  </div>


 


      
      
  
  <script src="/socket.io/socket.io.js"></script>

  <script>
    var socket = io();
    var video = document.getElementById('video');
    var video2 = document.getElementById('video2');
    var patient_id = null;
    const peerConnection = new RTCPeerConnection({
      iceServers: [   
        {
          urls: "stun:stun.stunprotocol.org"
        }
      ]
  });

  socket.on("ice",function(socket_ret,candidate){
    console.log("recieving ice")

    var candidate = new RTCIceCandidate(candidate);
  peerConnection.addIceCandidate(candidate)




  })
  

  peerConnection.onicecandidate = function handle(event){

if(event.candidate){

  socket.emit("sendice2",patient_id,event.candidate);


}




}





 
    
    if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {

      navigator.mediaDevices.getUserMedia({ video: true, audio:true }).then(function(stream) {
        //video.src = window.URL.createObjectURL(stream);
        
        video.srcObject = stream;
        video.play();
      });
    }

    socket.on('offer', function(sock_id, pcld){
      patient_id = sock_id


      var localStream = null;


      console.log("offer recieved")
      var desc = new RTCSessionDescription(pcld)
      // var candidate = new RTCIceCandidate(pcld.candidate) 
      // peerConnection.addIceCandidate(candidate)
      peerConnection.setRemoteDescription(desc).then(function(){
            return navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true
        }).then(function(stream){
          localStream = stream;
          document.getElementById("video2").srcObject = localStream

          localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));


        }).then(function(){
          return peerConnection.createAnswer();

        }).then(function(answer){
          return peerConnection.setLocalDescription(answer)


        })


          })
      
     
      // //peerConnection.setRemoteDescription(message)      
      // .then(() => peerConnection.createAnswer())
      // .then(sdp => peerConnection.setLocalDescription(sdp))
      .then(function(){
        socket.emit('hello2',sock_id,peerConnection.localDescription)
      })

    })

    peerConnection.ontrack = function(event){
      video2.srcObject = event.streams[1]
      video2.play();
      


    }


//     var room = get
// io.connect().emit('join room', {room: room});

//     const nsp = socket.of("/"+document.getElementById("dash").value);
//                 nsp.on('connection', function(socket){
//                         console.log('someone connected');
//                     });
//                     nsp.emit('hi', 'everyone!');
    // var video = document.getElementById('video');
    // console.log("i got offer")

    // const peerConnection = new RTCPeerConnection();
    // console.log("i got offer")
    
   

    

    
    

      const img = document.getElementById('img');

      





  </script>



  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous">
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.6/umd/popper.min.js"
    integrity="sha384-wHAiFfRlMFy6i5SRaxvfOCifBUQy1xHdJ/yoi7FRNXMRBu5WHdZYu1hA6ZOblgut" crossorigin="anonymous">
  </script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/js/bootstrap.min.js"
    integrity="sha384-B0UglyR+jN6CkvvICOB2joaf5I4l3gm9GU6Hc1og6Ls7i6U/mkkaduKaBhlAXv9k" crossorigin="anonymous">
  </script>
</body>


</html>
